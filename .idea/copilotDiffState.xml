<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Controller/InventoryLogsController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Controller/InventoryLogsController.java" />
              <option name="originalContent" value="package org.example.clothheaven.Controller;&#10;&#10;import org.example.clothheaven.DTO.InventoryLogsCreateDTO;&#10;import org.example.clothheaven.DTO.InventoryLogsResponseDTO;&#10;import org.example.clothheaven.Service.InventoryLogsService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/inventoryLogs&quot;)&#10;public class InventoryLogsController {&#10;&#10;    private final InventoryLogsService inventoryLogsService;&#10;&#10;    @Autowired&#10;    public InventoryLogsController(InventoryLogsService inventoryLogsService) {&#10;        this.inventoryLogsService = inventoryLogsService;&#10;    }&#10;&#10;    @PostMapping(&quot;/addLog&quot;)&#10;    public ResponseEntity&lt;InventoryLogsResponseDTO&gt; addInventoryLog(@RequestBody InventoryLogsCreateDTO logDTO) {&#10;        InventoryLogsResponseDTO addedLog = inventoryLogsService.addInventoryLog(logDTO);&#10;        return ResponseEntity.status(201).body(addedLog);&#10;    }&#10;&#10;    @GetMapping(&quot;/getAllLogs&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getAllInventoryLogs() {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getAllInventoryLogs();&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByLogId/{logId}&quot;)&#10;    public ResponseEntity&lt;InventoryLogsResponseDTO&gt; getLogById(@PathVariable Long logId) {&#10;        InventoryLogsResponseDTO response = inventoryLogsService.getLogById(logId);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductId/{productId}&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductId(@PathVariable String productId) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductId(productId);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductIdAndDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductIdAndDateRange(&#10;            @RequestParam String productId,&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductIdAndDateRange(productId, startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByDateRange(&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByDateRange(startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByChangeType/{changeType}&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByChangeType(@PathVariable String changeType) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByChangeType(changeType);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByChangeTypeAndDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByChangeTypeAndDateRange(&#10;            @RequestParam String changeType,&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByChangeTypeAndDateRange(changeType, startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductIdAndChangeType&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductIdAndChangeType(&#10;            @RequestParam String productId,&#10;            @RequestParam String changeType) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductIdAndChangeType(productId, changeType);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductIdAndChangeTypeAndDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductIdAndChangeTypeAndDateRange(&#10;            @RequestParam String productId,&#10;            @RequestParam String changeType,&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductIdAndChangeTypeAndDateRange(productId, changeType, startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example.clothheaven.Controller;&#10;&#10;import org.example.clothheaven.DTO.InventoryLogsCreateDTO;&#10;import org.example.clothheaven.DTO.InventoryLogsResponseDTO;&#10;import org.example.clothheaven.Service.InventoryLogsService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/inventoryLogs&quot;)&#10;public class InventoryLogsController {&#10;&#10;    private final InventoryLogsService inventoryLogsService;&#10;&#10;    @Autowired&#10;    public InventoryLogsController(InventoryLogsService inventoryLogsService) {&#10;        this.inventoryLogsService = inventoryLogsService;&#10;    }&#10;&#10;    @PostMapping(&quot;/addLog&quot;)&#10;    public ResponseEntity&lt;InventoryLogsResponseDTO&gt; addInventoryLog(@RequestBody InventoryLogsCreateDTO logDTO) {&#10;        InventoryLogsResponseDTO addedLog = inventoryLogsService.addInventoryLog(logDTO);&#10;        return ResponseEntity.status(201).body(addedLog);&#10;    }&#10;&#10;    @GetMapping(&quot;/getAllLogs&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getAllInventoryLogs() {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getAllInventoryLogs();&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByLogId/{logId}&quot;)&#10;    public ResponseEntity&lt;InventoryLogsResponseDTO&gt; getLogById(@PathVariable Long logId) {&#10;        InventoryLogsResponseDTO response = inventoryLogsService.getLogById(logId);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductId/{productId}&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductId(@PathVariable String productId) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductId(productId);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductIdAndDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductIdAndDateRange(&#10;            @RequestParam String productId,&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductIdAndDateRange(productId, startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByDateRange(&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByDateRange(startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByChangeType/{changeType}&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByChangeType(@PathVariable String changeType) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByChangeType(changeType);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByChangeTypeAndDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByChangeTypeAndDateRange(&#10;            @RequestParam String changeType,&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByChangeTypeAndDateRange(changeType, startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductIdAndChangeType&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductIdAndChangeType(&#10;            @RequestParam String productId,&#10;            @RequestParam String changeType) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductIdAndChangeType(productId, changeType);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;&#10;    @GetMapping(&quot;/getLogByProductIdAndChangeTypeAndDateRange&quot;)&#10;    public ResponseEntity&lt;List&lt;InventoryLogsResponseDTO&gt;&gt; getLogByProductIdAndChangeTypeAndDateRange(&#10;            @RequestParam String productId,&#10;            @RequestParam String changeType,&#10;            @RequestParam LocalDateTime startDate,&#10;            @RequestParam LocalDateTime endDate) {&#10;        List&lt;InventoryLogsResponseDTO&gt; logList = inventoryLogsService.getLogsByProductIdAndChangeTypeAndDateRange(productId, changeType, startDate, endDate);&#10;        return ResponseEntity.ok(logList);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/DTO/StaffCreateDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/DTO/StaffCreateDTO.java" />
              <option name="originalContent" value="package org.example.clothheaven.DTO;&#10;&#10;public class StaffCreateDTO {&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package org.example.clothheaven.DTO;&#10;&#10;public class StaffCreateDTO {&#10;&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Mapper/StaffMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Mapper/StaffMapper.java" />
              <option name="originalContent" value="package org.example.clothheaven.Mapper;&#10;&#10;import org.example.clothheaven.DTO.StaffResponseDTO;&#10;import org.example.clothheaven.Model.Staff;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;public class StaffMapper {&#10;&#10;    public StaffResponseDTO toResponseDTO(Staff staff) {&#10;        if (staff == null) {&#10;            return null;&#10;        }&#10;&#10;        StaffResponseDTO dto = new StaffResponseDTO();&#10;        dto.setStaffId(staff.getStaffId());&#10;&#10;        if (staff.getUser() != null) {&#10;            dto.setUser(staff.getUser());&#10;        }&#10;&#10;        return dto;&#10;    }&#10;}&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package org.example.clothheaven.Mapper;&#13;&#10;&#13;&#10;import org.example.clothheaven.DTO.StaffCreateDTO;&#13;&#10;import org.example.clothheaven.DTO.StaffResponseDTO;&#13;&#10;import org.example.clothheaven.Model.Staff;&#13;&#10;import org.example.clothheaven.Model.User;&#13;&#10;import org.springframework.stereotype.Component;&#13;&#10;&#13;&#10;@Component&#13;&#10;public class StaffMapper {&#13;&#10;&#13;&#10;    public StaffResponseDTO toResponseDTO(Staff staff) {&#13;&#10;        if (staff == null) {&#13;&#10;            return null;&#13;&#10;        }&#13;&#10;&#13;&#10;        StaffResponseDTO dto = new StaffResponseDTO();&#13;&#10;        dto.setStaffId(staff.getStaffId());&#13;&#10;        dto.setUser(staff.getUser());&#13;&#10;&#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Staff toEntity(StaffCreateDTO createDTO, User user) {&#13;&#10;        if (createDTO == null || user == null) {&#13;&#10;            return null;&#13;&#10;        }&#13;&#10;&#13;&#10;        Staff staff = new Staff();&#13;&#10;        staff.setUser(user);&#13;&#10;&#13;&#10;        return staff;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Model/Staff.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Model/Staff.java" />
              <option name="originalContent" value="package org.example.clothheaven.Model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;staff&quot;)&#10;public class Staff {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;staff_id&quot;, nullable = false)&#10;    private Long staffId;&#10;&#10;    @OneToOne(cascade = CascadeType.REMOVE) // when deleting user form the staff table it will automatically delete the user from the user table&#10;    @JoinColumn(name = &quot;user_id&quot;, referencedColumnName = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Default constructor&#10;    public Staff() {&#10;    }&#10;&#10;    // Constructor with parameters&#10;    public Staff(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    public Long getStaffId() {&#10;        return staffId;&#10;    }&#10;&#10;    public void setStaffId(Long staffId) {&#10;        this.staffId = staffId;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.clothheaven.Model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;staff&quot;)&#10;public class Staff {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;staff_id&quot;, nullable = false)&#10;    private Long staffId;&#10;&#10;    @OneToOne(cascade = CascadeType.REMOVE) // when deleting user form the staff table it will automatically delete the user from the user table&#10;    @JoinColumn(name = &quot;user_id&quot;, referencedColumnName = &quot;user_id&quot;)&#10;    private User user;&#10;&#10;    // Default constructor&#10;    public Staff() {&#10;    }&#10;&#10;    // Constructor with parameters&#10;    public Staff(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    public Long getStaffId() {&#10;        return staffId;&#10;    }&#10;&#10;    public void setStaffId(Long staffId) {&#10;        this.staffId = staffId;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Service/InventoryLogsService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/org/example/clothheaven/Service/InventoryLogsService.java" />
              <option name="originalContent" value="package org.example.clothheaven.Service;&#10;&#10;import org.example.clothheaven.DTO.InventoryLogsCreateDTO;&#10;import org.example.clothheaven.DTO.InventoryLogsResponseDTO;&#10;import org.example.clothheaven.Exception.EmptyLogsException;&#10;import org.example.clothheaven.Exception.InventoryLogNotFoundException;&#10;import org.example.clothheaven.Mapper.InventoryLogsMapper;&#10;import org.example.clothheaven.Model.InventoryLogs;&#10;import org.example.clothheaven.Repository.InventoryLogsRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class InventoryLogsService {&#10;&#10;    private final InventoryLogsRepository inventoryLogsRepository;&#10;    private final InventoryLogsMapper inventoryLogsMapper;&#10;&#10;    @Autowired&#10;    public InventoryLogsService(InventoryLogsRepository inventoryLogsRepository, InventoryLogsMapper inventoryLogsMapper) {&#10;        this.inventoryLogsRepository = inventoryLogsRepository;&#10;        this.inventoryLogsMapper = inventoryLogsMapper;&#10;    }&#10;&#10;    public InventoryLogsResponseDTO addInventoryLog(InventoryLogsCreateDTO dto) {&#10;        InventoryLogs inventoryLogs = inventoryLogsMapper.toEntity(dto);&#10;        InventoryLogs savedLog = inventoryLogsRepository.save(inventoryLogs);&#10;        return inventoryLogsMapper.toResponseDTO(savedLog);&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getAllInventoryLogs() {&#10;        List&lt;InventoryLogs&gt; inventoryLogs = inventoryLogsRepository.findAll();&#10;        if (inventoryLogs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No inventory logs found in the system&quot;);&#10;        }&#10;        return inventoryLogs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public InventoryLogsResponseDTO getLogById(Long id) {&#10;        InventoryLogs log = inventoryLogsRepository.findById(id)&#10;                .orElseThrow(() -&gt; new InventoryLogNotFoundException(&quot;Log with ID &quot; + id + &quot; not found&quot;));&#10;        return inventoryLogsMapper.toResponseDTO(log);&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductId(String productId) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductProductId(productId);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductIdAndDateRange(String productId, LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductIdAndInventoryLogsDateBetween(productId, startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId + &quot; in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByDateRange(LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByInventoryLogsDateBetween(startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByChangeType(String changeType) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByChangeType(changeType);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for change type: &quot; + changeType);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByChangeTypeAndDateRange(String changeType, LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByChangeTypeAndInventoryLogsDateBetween(changeType, startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for change type: &quot; + changeType + &quot; in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductIdAndChangeType(String productId, String changeType) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductIdAndChangeType(productId, changeType);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId + &quot; and change type: &quot; + changeType);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductIdAndChangeTypeAndDateRange(String productId, String changeType, LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductIdAndChangeTypeAndInventoryLogsDateBetween(productId, changeType, startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId + &quot;, change type: &quot; + changeType + &quot; in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public InventoryLogsResponseDTO updateInventoryLog(Long id, InventoryLogsCreateDTO dto) {&#10;        InventoryLogs existingLog = inventoryLogsRepository.findById(id)&#10;                .orElseThrow(() -&gt; new InventoryLogNotFoundException(&quot;Log with ID &quot; + id + &quot; not found&quot;));&#10;&#10;        // Update the existing log with new data&#10;        existingLog.setProduct(dto.getProduct());&#10;        existingLog.setChangeType(dto.getChangeType());&#10;        existingLog.setQuantityChanged(dto.getQuantityChanged());&#10;        existingLog.setInventoryLogsDate(dto.getInventoryLogsDate());&#10;&#10;        InventoryLogs updatedLog = inventoryLogsRepository.save(existingLog);&#10;        return inventoryLogsMapper.toResponseDTO(updatedLog);&#10;    }&#10;&#10;    public void deleteInventoryLog(Long id) {&#10;        InventoryLogs log = inventoryLogsRepository.findById(id)&#10;                .orElseThrow(() -&gt; new InventoryLogNotFoundException(&quot;Log with ID &quot; + id + &quot; not found&quot;));&#10;        inventoryLogsRepository.delete(log);&#10;    }&#10;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.clothheaven.Service;&#10;&#10;import org.example.clothheaven.DTO.InventoryLogsCreateDTO;&#10;import org.example.clothheaven.DTO.InventoryLogsResponseDTO;&#10;import org.example.clothheaven.Exception.EmptyLogsException;&#10;import org.example.clothheaven.Exception.InventoryLogNotFoundException;&#10;import org.example.clothheaven.Mapper.InventoryLogsMapper;&#10;import org.example.clothheaven.Model.InventoryLogs;&#10;import org.example.clothheaven.Repository.InventoryLogsRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class InventoryLogsService {&#10;&#10;    private final InventoryLogsRepository inventoryLogsRepository;&#10;    private final InventoryLogsMapper inventoryLogsMapper;&#10;&#10;    @Autowired&#10;    public InventoryLogsService(InventoryLogsRepository inventoryLogsRepository, InventoryLogsMapper inventoryLogsMapper) {&#10;        this.inventoryLogsRepository = inventoryLogsRepository;&#10;        this.inventoryLogsMapper = inventoryLogsMapper;&#10;    }&#10;&#10;    public InventoryLogsResponseDTO addInventoryLog(InventoryLogsCreateDTO dto) {&#10;        InventoryLogs inventoryLogs = inventoryLogsMapper.toEntity(dto);&#10;        InventoryLogs savedLog = inventoryLogsRepository.save(inventoryLogs);&#10;        return inventoryLogsMapper.toResponseDTO(savedLog);&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getAllInventoryLogs() {&#10;        List&lt;InventoryLogs&gt; inventoryLogs = inventoryLogsRepository.findAll();&#10;        if (inventoryLogs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No inventory logs found in the system&quot;);&#10;        }&#10;        return inventoryLogs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public InventoryLogsResponseDTO getLogById(Long id) {&#10;        InventoryLogs log = inventoryLogsRepository.findById(id)&#10;                .orElseThrow(() -&gt; new InventoryLogNotFoundException(&quot;Log with ID &quot; + id + &quot; not found&quot;));&#10;        return inventoryLogsMapper.toResponseDTO(log);&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductId(String productId) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductProductId(productId);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductIdAndDateRange(String productId, LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductProductIdAndInventoryLogsDateBetween(productId, startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId + &quot; in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByDateRange(LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByInventoryLogsDateBetween(startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByChangeType(String changeType) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByChangeType(changeType);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for change type: &quot; + changeType);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByChangeTypeAndDateRange(String changeType, LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByChangeTypeAndInventoryLogsDateBetween(changeType, startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for change type: &quot; + changeType + &quot; in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductIdAndChangeType(String productId, String changeType) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductProductIdAndChangeType(productId, changeType);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId + &quot; and change type: &quot; + changeType);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public List&lt;InventoryLogsResponseDTO&gt; getLogsByProductIdAndChangeTypeAndDateRange(String productId, String changeType, LocalDateTime startDate, LocalDateTime endDate) {&#10;        List&lt;InventoryLogs&gt; logs = inventoryLogsRepository.findByProductProductIdAndChangeTypeAndInventoryLogsDateBetween(productId, changeType, startDate, endDate);&#10;        if (logs.isEmpty()) {&#10;            throw new EmptyLogsException(&quot;No logs found for product ID: &quot; + productId + &quot;, change type: &quot; + changeType + &quot; in the specified date range&quot;);&#10;        }&#10;        return logs.stream()&#10;                .map(inventoryLogsMapper::toResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>